<div class="container mt-1">
    <div id="alertPlaceholder"></div>

    <form id="clienteForm" action="/cliente/register" method="POST">
        <div class="mb-3">
            <label for="nombre" class="form-label">Nombre</label>
            <input type="text" class="form-control" id="nombre" name="nombre" required />
        </div>

        <div class="mb-3">
            <label for="email" class="form-label">Correo electrónico</label>
            <input type="email" class="form-control" id="email" name="email" />
        </div>

        <div class="mb-3">
            <label for="telefono" class="form-label">Teléfono</label>
            <input type="tel" class="form-control" id="telefono" name="telefono" />
        </div>

        <div class="text-center">
            <button id="submitBtn" class="search-btn" data-bs-dismiss="offcanvas">Submit</button>
        </div>
    </form>
</div>

<!-- Bootstrap JS (for alerts) -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

<script>
    (function () {
        const form = document.getElementById("clienteForm");
        const submitBtn = document.getElementById("submitBtn");
        const alertPlaceholder = document.getElementById("alertPlaceholder");

        const clienteOffcanvasEl = document.getElementById("clienteOffcanvas");
        const clienteOffcanvas = clienteOffcanvasEl ? bootstrap.Offcanvas.getOrCreateInstance(clienteOffcanvasEl) : null;

        // Safe alert function
        function showAlert(type, msg) {
            const wrapper = document.createElement("div");
            wrapper.innerHTML = `
                    <div class="alert alert-${type} alert-dismissible fade show" role="alert">${msg}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>`;
            alertPlaceholder.append(wrapper);

            // Auto-close after 3 seconds
            setTimeout(() => {
                const alertNode = bootstrap.Alert.getOrCreateInstance(wrapper.querySelector(".alert"));
                alertNode.close();
            }, 3000);
        }

        // Handle form submission
        form.addEventListener("submit", async (e) => {
            e.preventDefault();
            submitBtn.disabled = true;

            const payload = {
                nombre: form.nombre.value.trim(),
                email: form.email.value.trim(),
                telefono: form.telefono.value.trim(),
            };

            try {
                const res = await fetch("/cliente/register", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(payload),
                });

                const json = await res.json().catch((err) => {
                    console.log("JSON parse error: ", err);
                    showAlert("danger", json.error || json.message || "Error al registrar cliente.");
                    form.reset();
                });

                if (res.ok) {
                    showAlert("success", json.message || "Cliente registrado correctamente.");
                    form.reset();

                    // refresh grid rows from server (keeps it simple and in sync)
                    fetch('/clientes')
                        .then(r => r.json())
                        .then((data) => { 
                            gridApi.setGridOption("rowData", data); 
                        });
                    // the page's code sets rowData via setGridOption previously, reuse same method
                    if (gridApi && typeof gridApi.setGridOption === 'function') {
                        gridApi.setGridOption("rowData", data);
                    } else if (gridOptions.api && typeof gridOptions.api.setRowData === 'function') {
                        gridOptions.api.setRowData(data);
                    }
                } else {
                    showAlert("danger", json.error || json.message || "Error al registrar cliente.");
                    form.reset();
                }
            } catch (err) {
                showAlert("danger", err.message || "Error de red, intente nuevamente.");
                form.reset();
            } finally {
                submitBtn.disabled = false;
            }
        });
    })();
</script>